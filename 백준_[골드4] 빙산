import sys
from collections import deque

input = sys.stdin.readline
n, m = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


def bfs(x, y):
    queue = deque()
    queue.append((x, y))
    visited[x][y] = True

    while queue:
        a, b = queue.popleft()
        for i in range(4):

            nx = a + dx[i]
            ny = b + dy[i]

            if 0 <= nx < n and 0 <= ny < m:
                if graph[nx][ny] != 0 and visited[nx][ny] == False:
                    visited[nx][ny] = True
                    queue.append((nx, ny))

                elif graph[nx][ny] == 0:
                    sea_count[a][b] += 1
    return 1


year = 0
check = False
while True:
    visited = [[False] * m for _ in range(n)]
    sea_count = [[0] * m for _ in range(n)]
    result = []

    for i in range(n):
        for j in range(m):
            if graph[i][j] != 0 and visited[i][j] == False:
                result.append(bfs(i, j))

    # 빙산 깎기
    for i in range(n):
        for j in range(m):
            graph[i][j] -= sea_count[i][j]
            if graph[i][j] < 0:
                graph[i][j] = 0

    if len(result) == 0:
        break
    if len(result) >= 2:
        check = True
        break

    year += 1

if check:
    print(year)
else:
    print(0)


# 한번에 깎기.