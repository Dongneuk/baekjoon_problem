import sys
from collections import deque

input = sys.stdin.readline

n, m = map(int, input().split())
graph = []
for _ in range(n):
    graph.append(list(map(int, input().split())))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


def bfs(x, y):
    queue = deque()
    queue.append((x, y))
    visited[x][y] = True

    while queue:
        a, b = queue.popleft()
        for d in range(4):
            nx = a + dx[d]
            ny = b + dy[d]

            if 0 <= nx < n and 0 <= ny < m:
                if graph[nx][ny] != 0 and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))

                elif graph[nx][ny] == 0:
                    tmp_graph[a][b] += 1

    return True


year = 0
while True:
    visited = [[False] * m for _ in range(n)]
    tmp_graph = [[0] * m for _ in range(n)]
    cnt = 0

    # 맵 순회하면서 근처 바다 갯수 체크
    for i in range(n):
        for j in range(m):
            if graph[i][j] != 0 and not visited[i][j]:
                bfs(i, j)
                cnt += 1

    # 빙산 깎기
    for i in range(n):
        for j in range(m):
            graph[i][j] -= tmp_graph[i][j]
            if graph[i][j] < 0:
                graph[i][j] = 0

    if cnt == 0:
        year = 0
        break

    if cnt >= 2:
        break

    year += 1

print(year)

