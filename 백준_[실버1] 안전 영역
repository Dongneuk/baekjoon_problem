from collections import deque

n = int(input())

graph = []
max_height = 0
for i in range(n):
    graph.append(list(map(int, input().split())))
    for j in range(n):
        if graph[i][j] > max_height:
            max_height = graph[i][j]

answer = 0

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


def bfs(x, y, h, visited):
    queue = deque()
    queue.append((x, y))
    visited[x][y] = True

    while queue:

        x, y = queue.popleft()

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0 <= nx < n and 0 <= ny < n:
                if graph[nx][ny] > h and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))


for height in range(max_height):
    visited = [[False] * n for _ in range(n)]
    cnt = 0

    for i in range(n):
        for j in range(n):
            if graph[i][j] > height and not visited[i][j]:
                bfs(i, j, height, visited)
                cnt += 1

    answer = max(answer, cnt)

print(answer)