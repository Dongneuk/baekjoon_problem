from collections import deque

# 마을의 가로, 세로 길이
n = int(input())


# 집의 맵 완성
graph = []
for _ in range(n):
    graph.append(list(map(int, input().rstrip())))


dx = [0, 1, 0, -1]
dy = [-1, 0, 1, 0]


def dfs(x, y):
    if x < 0 or x >= n or y < 0 or y >= n:
        return False

    if graph[x][y] == 1:
        global cnt
        cnt += 1
        graph[x][y] = 2
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            dfs(nx, ny)
        return True
    return False


cnt = 0
## 마을당 집의 갯수를 담을 리스트
cnt_lst = []

for i in range(n):
    for j in range(n):
        if dfs(i, j):
            cnt_lst.append(cnt)
            cnt = 0

cnt_lst.sort()
print(len(cnt_lst))
for c in cnt_lst:
    print(c)


## bfs 활용 가능.

2. 
###############################################


from collections import deque

n = int(input())

graph = []
for _ in range(n):
    graph.append(list(map(int, input())))

visited = [[False] * len(graph[0]) for _ in range(len(graph))]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


def bfs(a, b):
    cnt = 0
    queue = deque()
    queue.append((a, b))
    visited[a][b] = True

    while queue:
        x, y = queue.popleft()
        cnt += 1

        for d in range(4):
            nx = x + dx[d]
            ny = y + dy[d]

            if 0 <= nx < len(graph) and 0 <= ny < len(graph[0]):
                if graph[nx][ny] == 1 and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))


    return cnt


answer = []
for i in range(len(graph)):
    for j in range(len(graph[0])):
        if graph[i][j] == 1 and not visited[i][j]:
            result = bfs(i, j)
            answer.append(result)


print(len(answer))
answer.sort()
for a in answer:
    print(a)

