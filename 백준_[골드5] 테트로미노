import sys
from collections import deque

input = sys.stdin.readline

n, m = map(int, input().split())

graph = []
for _ in range(n):
    graph.append(list(map(int, input().split())))

visited = [[False] * m for _ in range(n)]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

max_value = 0


def dfs(x, y, value_sum, cnt):
    global max_value

    queue = deque()
    queue.append((x, y))

    if cnt == 4:
        max_value = max(max_value, value_sum)
        return

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:
            visited[nx][ny] = True
            dfs(nx, ny, value_sum + graph[nx][ny], cnt + 1)
            visited[nx][ny] = False


def exceptional(x, y):
    global max_value

    for i in range(4):
        temp = graph[x][y]

        for j in range(3):
            d = (i + j) % 4

            nx = x + dx[d]
            ny = y + dy[d]

            if nx < 0 or nx >= n or ny < 0 or ny >= m:
                temp = 0
                break
            temp += graph[nx][ny]
        max_value = max(max_value, temp)


for i in range(n):
    for j in range(m):
        visited[i][j] = True
        dfs(i, j, graph[i][j], 1)
        visited[i][j] = False

        exceptional(i, j)

print(max_value)
