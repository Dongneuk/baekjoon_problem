import sys
from collections import deque

input = sys.stdin.readline

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

n, m = map(int, input().split())
visited = [[False] * n for _ in range(m)]
graph = []
for _ in range(m):
    graph.append(list(input().strip()))


def bfs(x, y, color):
    cnt = 0
    queue = deque()
    queue.append((x, y))
    visited[x][y] = True

    while queue:
        a, b = queue.popleft()
        for i in range(4):
            nx = a + dx[i]
            ny = b + dy[i]

            if 0 <= nx < m and 0 <= ny < n:
                if graph[nx][ny] == color and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))
                    cnt += 1


    return cnt+1



white, blue = 0, 0
for i in range(m):
    for j in range(n):
        if graph[i][j] == 'W' and not visited[i][j]:
            white += bfs(i, j, 'W') ** 2

        elif graph[i][j] == 'B' and not visited[i][j]:
            blue += bfs(i, j, 'B') ** 2

print(white, blue)


##################################################################
##################################################################
##################################################################


import sys

input = sys.stdin.readline

n, m = map(int, input().split())

graph = []
for _ in range(m):
    graph.append(list(input().strip()))


dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def dfs(x, y, cnt):
    c = graph[x][y]
    graph[x][y] = 1

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]

        if 0 <= nx < m and 0 <= ny < n and graph[nx][ny] == c:
            cnt = dfs(nx, ny, cnt+1)

    return cnt



white, blue = 0, 0
for i in range(m):
    for j in range(n):
        if graph[i][j] == 'W':
            white += dfs(i, j, 1) ** 2

        elif graph[i][j] == 'B':
            blue += dfs(i, j, 1) ** 2

print(white, blue)