import heapq
import sys
input = sys.stdin.readline

v, e = map(int, input().split())
k = int(input())
heap = []
INF = sys.maxsize

distance = [INF] * (v + 1)

graph = [[] for _ in range(v + 1)]
for _ in range(e):
    a, b, w = map(int, input().split())

    graph[a].append([w, b])


def dijkstra(start):
    distance[start] = 0

    heapq.heappush(heap, (0, start))

    while heap:
        cost, node = heapq.heappop(heap)

        if distance[node] < cost:
            continue

        for c, n in graph[node]:

            if cost + c < distance[n]:
                distance[n] = cost + c
                heapq.heappush(heap, [cost + c, n])


dijkstra(k)

for i in range(1, v+1):
    if distance[i] == INF:
        print("INF")
    else:
        print(distance[i])